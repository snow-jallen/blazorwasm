@page "/todo"
@inject IJSRuntime JSRuntime

<h1>Todo (@todos.Count(todo=>!todo.IsDone))</h1>

<ul>
    @foreach(var todo in todos)
    {
        <li>
            <input type="checkbox" @bind="todo.IsDone" />
            @todo.Title
        </li>
    }
</ul>

<input @ref="todoBox" placeholder="Something to do" @bind-value="NewTodo" @bind-value:event="oninput" />
<button @onclick="AddTodo">Add todo</button>
<p>@foreach(var line in Output)
    {
        <span>NewLine: @line <br/></span>
    }
</p>

@code
{
    ElementReference todoBox;
    private IList<TodoItem> todos = new List<TodoItem>();
    string newTodo;
    public string NewTodo
    {
        get{return newTodo;}
        set
        {
            newTodo = value;
            Output.Add($"New value: {value}");
        }
    }
    public List<string> Output{get;set;} = new List<string>();

    private async Task AddTodo()
    {
        if(!string.IsNullOrWhiteSpace(newTodo))
        {
            todos.Add(new TodoItem{Title=newTodo});
            NewTodo=string.Empty;
            await JSRuntime.InvokeVoidAsync("exampleJsFunctions.focusElement", todoBox);
        }
    }
}